#===修正tomcat端口,避免端口冲突
server.port=8083
spring.application.name=dubboConsumer
logging.level.root=info
logging.file= ${spring.application.name}-${server.port}.log

#======jpa配置
#spring.jpa.database=MYSQL
#spring.jpa.show-sql=true

#启动时会根据实体类生成数据表，或者更新表结构，不清空数据，开发阶段使用；validate：表结构稳定后使用，可用于正式环境；
#spring.jpa.hibernate.ddl-auto=update

#=====dubbo配置
## Dubbo 服务消费者配置
spring.dubbo.application.name=consumer
spring.dubbo.registry.address=zookeeper://127.0.0.1:2181
spring.dubbo.scan=com.xp.dubbocustom.controller
#spring.dubbo.application.name=consumer
#spring.dubbo.registry.address=redis://www.modaolc.com:6379
##spring.dubbo.registry=zookeeper://127.0.0.1:2181
#spring.dubbo.protocol = dubbo
#spring.dubbo.scan=com.xp.dubboapi.service
#超时时间
dubbo.timeout=3000
#启动dubbo检查，默认是需要检查的，false表示不检查
dubbo.check=true

##=======redis配置
## Redis数据库索引（默认为0）
#spring.redis.database=0
## Redis服务器地址
#spring.redis.host=www.modaolc.com
## Redis服务器连接端口
#spring.redis.port=6379
## Redis服务器连接密码（默认为空）
##spring.redis.password=modao
## 连接池最大连接数（使用负值表示没有限制）
#spring.redis.pool.max-active=8
## 连接池最大阻塞等待时间（使用负值表示没有限制）
#spring.redis.pool.max-wait=-1
## 连接池中的最大空闲连接
#spring.redis.pool.max-idle=8
## 连接池中的最小空闲连接
#spring.redis.pool.min-idle=0
## 连接超时时间（毫秒）
#spring.redis.timeout=0
